// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String? // 소셜 로그인 사용자는 null 가능
  name       String
  profileImg String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDel      Boolean  @default(false)

  posts            Post[]
  comments         Comment[]
  likes            Like[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  orders           Order[]
  cartItems        Cart[]
}

model Post {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDel     Boolean  @default(false)

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content   String
  createdAt DateTime @default(now())
  isDel     Boolean  @default(false)
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  imageUrl      String?
  price         Int
  stockQuantity Int
  createdAt     DateTime @default(now())
  isDel         Boolean  @default(false)

  cartItems Cart[]
  orders    Order[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
}

model Order {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  totalPrice Int
  status     String // enum 사용도 가능: pending, paid, canceled
  createdAt  DateTime @default(now())
}
